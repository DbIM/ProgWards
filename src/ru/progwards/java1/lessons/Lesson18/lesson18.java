package ru.progwards.java1.lessons.Lesson18;

import ru.progwards.java1.lessons.test.Person;

import java.util.StringTokenizer;

public class lesson18 {
    //Правильный ответ:
    // Простой класс для генерации псевдослучайных значений различных примитивов → java.util.Random,
    // Быстрый ГПСЧ → java.util.SplittableRandom,
    // Криптоустойчивый ГПСЧ (данный генератор ближе всего ГСЧ) → java.security.SecureRandom,
    // Генерация double в интервале от 0.0 (включая) до 1.0 (исключая) → java.lang.Math.random(),
    // ГПСЧ для многопоточных программ → java.util.concurrent.ThreadLocalRandom

    //Правильные ответы:
    // Статический метод Math.random() умеет генерировать псевдослучайные значения типа double в диапазоне от 0 до 1,
    // Класс Random умеет генерировать псевдослучайные значения по разным примитивным типам,
    // Класс Random опирается на seed, при этом значение seed полностью определяет последовательность ПСЧ

    //Правильные ответы:
    // Установка seed не определяет однозначно последовательность ПСЧ,
    // Содержит несколько алгоритмов, зависящих от платформы и версии JDK,
    // Позволяет генерировать криптоустойчивые случайные значения

    //Правильные ответы:
    // Случайные значения генерируются с высокой скоростью,
    // Установка seed полностью определяет последовательность ПСЧ

    //Правильные ответы:
    // Дополнительно реализует методы для генерации значений в диапазоне,
    // Запрещает менять seed, Является потокобезопасным
    // Является потокобезопасным

    //Правильные ответы:
    // Позволяет разбивать текст на лексемы,
    // Можно получить не только лексемы, но и разделители

    //StringTokenizer-этоткласснамстрокуразобьётнараз

    //|0002|0xf|3,3|

    //Правильный ответ:
    // десятичное целое → 'd',
    // дата-время → 't', 'T',
    // строка → 's', 'S',
    // символ → 'c', 'C',
    // число с плавающей точкой → 'f',
    // булевское значение → 'b', 'B',
    // число с плавающей точкой в экспоненциальной форме → 'e', 'E',
    // символ процента → '%',
    // шестнадцатеричное число → 'x', 'X'

    //Правильный ответ:
    // специфическая обработка, см документацию → '#',
    // для положительных значений заполнить пробелами слева → ' ',
    // всегда указывать знак → '+',
    // заполнить нулями слева → '0',
    // использовать специфический разделитель групп → ',',
    // выравнивание влево → '-'


    //Создайте метод с сигнатурой String swapWords(String sentance),
    // который возвращает слова фразы из sentence через одно,
    // начиная с первого, через пробел в виде строки. Разделители " .,-!\n"    //
    //Например, слова фразы
    // "Слово - серебро, молчание - золото!"
    // должны быть преобразованы в  "серебро Слово золото молчание"
    static String swapWords(String sentance) {
        String test1 = "";
        String test2 = "";
        String result = "";
        StringTokenizer tokenizer = new StringTokenizer(sentance, " -.,!\n");
        int count = tokenizer.countTokens();
        String[] words = new String[count];
        for (int i = 0; i < count; i++) {
            words[i] = tokenizer.nextToken();
        }
        for (int i = 0; i < words.length-1; i++) {
            if (count%2==0) {
                if (i % 2 == 0) {
                    result = result + words[i + 1] + " " + words[i] + " ";
                }
            }
            else {
                if (i % 2 == 0) {
                    result = result + words[i + 1] + " " + words[i] + " ";
                }
                if (i + 2 == words.length) {
                    result = result + words[i + 1];
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        String txt = "Слово - серебро, молчание - золото!";
        //серебро Слово золото молчание золото
        String txt2 = "Убитых словом, добивают молчанием. (c) Уильям Шекспир.";
        //словом Убитых молчанием добивают Уильям (c) Шекспир
        System.out.println(swapWords(txt));
        System.out.println(swapWords(txt2));
        System.out.println(swapWords("Тех слов, где есть хоть капля яда\n" +
                        "И в шутку говорить не надо.\n" +
                        "(c) Абу Шукур Балхи"));
        //слов Тех есть где капля хоть И яда шутку в не говорить (c) надо Шукур Абу Балхи

        System.out.format("|%04d|%#x|%2.1f|", 2, 15, 3.25);
    }

}
